# This workflow will install Python dependencies, run tests and lint with all currently supported python versions on all major plattforms
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: GitHub CI

on:
  push:
    branches: [ main, dev ]
    tags:
      - '*'
  pull_request:
    branches: [ main, dev ]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-13, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set deployment target for macOS-13 builds
      - name: Set macOS deployment target
        if: matrix.os == 'macOS-13'
        run: echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
      # # Run cibuildwheel using the PyPA action
      # - name: Build wheels
      #   uses: pypa/cibuildwheel@v2
      #   with:
      #     output-dir: dist
      #   env:
      #     CIBW_SKIP: "pp* cp36-*  cp37-* cp38-*"
      #     CIBW_ARCHS: "auto"
      #     CIBW_BEFORE_BUILD: "python -m pip install --upgrade pip && pip install wheel && pip install -r requirements.txt"
      # - name: Upload built wheels
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: wheels_${{ matrix.os }}
      #     path: dist/*
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python --version
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install wheel
      - name: Build macOS-13 wheel
        if: ${{ matrix.os == 'macOS-13'}}
        run: |
          python setup.py bdist_wheel --plat-name macosx-13.0-universal2 --verbose
          ls dist/*
      - name: Build other OS wheels
        if: ${{ matrix.os != 'macOS-13'}}
        run: |
          python setup.py bdist_wheel --verbose
          ls dist/*
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wntr_${{ matrix.python-version }}_${{ matrix.os }}.whl
          # name: wheels
          path: dist/wntr*

  test_wheels:
    name: Test wheels
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [windows-latest, macOS-13, macos-latest, ubuntu-latest]
      fail-fast: false
    steps:
    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheel
      uses: actions/download-artifact@v4
      with:
        name: wntr_${{ matrix.python-version }}_${{ matrix.os }}.whl
    - name: Install wntr
      run: |
        python -m pip install --upgrade pip
        pip install wheel "numpy>=1.2.1,<2.0" scipy networkx pandas matplotlib setuptools
        pip install --no-index --pre --find-links=. wntr
    - name: Import wntr
      run: |
        python -c "import wntr"
    - name: Checkout requirements.txt
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          requirements.txt
          wntr/tests/
          examples/
          wntr/epanet/libepanet/darwin-formula/libomp.rb
        sparse-checkout-cone-mode: false
        fetch-depth: 1
    - if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
      run: |
        brew reinstall --build-from-source --formula wntr/epanet/libepanet/darwin-formula/libomp.rb
    - name: Test wntr
      run: |
        pip install -r requirements.txt
        pytest wntr/tests/ --ignore=wntr/tests/test_demos.py --ignore=wntr/tests/test_examples.py
  
  pytest_coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [windows-latest, macOS-13, ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
      run: |
        brew reinstall --build-from-source --formula wntr/epanet/libepanet/darwin-formula/libomp.rb
    - name: Install dependencies
      run: |
        python --version
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m pip install -e .
    - name: Run Tests
      if: ${{ matrix.os != 'macos-latest' }}
      run: | 
        coverage erase
        coverage run --context=${{ matrix.os }}.py${{ matrix.python-version }} --source=wntr --omit="*/tests/*","*/sim/network_isolation/network_isolation.py","*/sim/aml/evaluator.py" -m pytest  --doctest-modules --doctest-glob="*.rst" wntr
        coverage run --context=${{ matrix.os }}.py${{ matrix.python-version }} --source=wntr --omit="*/tests/*","*/sim/network_isolation/network_isolation.py","*/sim/aml/evaluator.py" --append -m pytest --doctest-glob="*.rst" documentation
      env:
        COVERAGE_FILE: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
    - name: Run Tests (ARM-processor)
      if: ${{ matrix.os == 'macos-latest'}}
      # doctests are not flexible enough to skip EPANET=v2.0 errors on ARM processor, so do not run doctests on ARM system
      run: | 
        coverage erase
        coverage run --context=${{ matrix.os }}.py${{ matrix.python-version }} --source=wntr --omit="*/tests/*","*/sim/network_isolation/network_isolation.py","*/sim/aml/evaluator.py" -m pytest  --doctest-modules --doctest-glob="*.rst" wntr
      env:
        COVERAGE_FILE: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
    - name: Save coverage
      uses: actions/upload-artifact@v4
      with:
        name: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
        path: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
        include-hidden-files: true

  combine_reports:
    name: Combine coverage reports
    needs: [ pytest_coverage ]
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - uses: actions/checkout@v4
    - name: Install coverage
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m pip install -e .
        pip install coveralls
    - name: Download coverage artifacts from test matrix
      uses: actions/download-artifact@v4
      with:
        pattern: .coverage.*.ubuntu-latest # coverage from other OS cause problems
    - name: Setup coverage and combine reports
      run: coverage combine .coverage.*.ubuntu-latest
    - name: Create coverage report
      run: |
        echo "[paths]" > .coveragerc
        echo "source = " >> .coveragerc
        echo "    wntr/" >> .coveragerc
        echo "    wntr\\" >> .coveragerc
        echo "    D:\\a\\WNTR\\WNTR\\wntr" >> .coveragerc
        echo "    /home/runner/work/WNTR/WNTR/wntr" >> .coveragerc
        echo "    /Users/runner/work/WNTR/WNTR/wntr" >> .coveragerc
        echo "    ${{ github.workspace }}/wntr" >> .coveragerc
        coverage report
        coverage json --pretty-print
        coverage html --show-contexts
    - name: Save coverage JSON
      uses: actions/upload-artifact@v4
      with:
        name: coverage-json
        path: coverage.json
    - name: Save coverage html
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: htmlcov
    - name: Push to coveralls
      run: coveralls --service=github --rcfile=.coveragerc
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  source:
    name: Make SDist artifact üì¶
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build SDist
        run: pipx run build --sdist
    
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs: [build, source]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Download wheel artifacts from build
        uses: actions/download-artifact@v4
        with:
          pattern: wntr_*
          path: dist
          merge-multiple: true
      - run: tree
      - name: Download SDist artifact
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - run: tree

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@0ab0b79471669eb3a4d647e625009c62f9f3b241 # release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_WNTR_API_TOKEN }}