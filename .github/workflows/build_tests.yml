# This workflow will install Python dependencies, run tests and lint with all currently supported python versions on all major plattforms
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: GitHub CI

on:
  push:
    branches: [ main, dev, release ]
    tags:
      - '*'
  pull_request:
    branches: [ main, dev, release ]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-13, macos-latest]
      fail-fast: false
    steps:
    - name: Set env variables to handle macOS-13
      if: ${{ matrix.os == 'macOS-13'}}
      run: |
        echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
        echo "PLAT=macosx-13.0-universal2" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install libomp on macos
      if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
      run: |
        brew reinstall --build-from-source --formula wntr/epanet/libepanet/darwin-formula/libomp.rb
    - name: Build wheels
      uses: pypa/cibuildwheel@79b0dd328794e1180a7268444d46cdf12e1abd01 # v2.21.0
      env:
        CIBW_ENVIRONMENT: BUILD_WNTR_EXTENSIONS='true'
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *-musllinux*"
        CIBW_REPAIR_WHEEL_COMMAND: ''
        # CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel show {wheel} && auditwheel repair -w {dest_dir} {wheel}"
        # CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux_2_34_x86_64:latest"
        # CIBW_REPAIR_WHEEL_COMMAND_LINUX: "echo 'Skipping auditwheel repair'"  # Disable manylinux
        env:
        CIBW_ENVIRONMENT_LINUX: "LD_LIBRARY_PATH=/home/runner/work/WNTR/WNTR/wntr/epanet/libepanet/linux-x64"
        CIBW_BEFORE_BUILD_MACOS: |
          # install_name_tool -change @rpath/libepanet2.dylib @loader_path/libepanet2.dylib wntr/epanet/libepanet/darwin-x64/libepanetmsx.dylib
          brew reinstall --build-from-source --formula wntr/epanet/libepanet/darwin-formula/libomp.rb
        # CIBW_ARCHS_MACOS: "universal2"
    - name: fix macos13 wheel names
      if: ${{ matrix.os == 'macOS-13'}}
      run: |
        for file in ./wheelhouse/*.whl; do
          new_name=$(echo "$file" | sed 's/macosx_14_0/macosx_13_0/')
          mv "$file" "$new_name"
        done

    - name: Upload wheels
      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  test_wheels:
    name: Test wheels
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [windows-latest, macOS-13, macos-latest, ubuntu-latest]
      fail-fast: false
    steps:
    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheel
      uses: actions/download-artifact@v4
      with:
        # name: wntr_${{ matrix.python-version }}_${{ matrix.os }}.whl
        pattern: "cibw-wheels-*"
        merge-multiple: true
    - name: Install wntr
      run: |
        python -m pip install --upgrade pip
        pip install wheel "numpy>=1.2.1,<2.0" scipy networkx pandas matplotlib setuptools
        pip install --no-index --pre --find-links=. wntr
    - name: Import wntr
      run: |
        python -c "import wntr"
    - name: Checkout requirements.txt
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          requirements.txt
          wntr/tests/
          examples/
          wntr/epanet/libepanet/darwin-formula/libomp.rb
        sparse-checkout-cone-mode: false
        fetch-depth: 1
    - if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
      run: |
        brew reinstall --build-from-source --formula wntr/epanet/libepanet/darwin-formula/libomp.rb
    - name: Test wntr
      run: |
        pip install -r requirements.txt
        pytest wntr/tests/ --ignore=wntr/tests/test_demos.py --ignore=wntr/tests/test_examples.py
  
  pytest_coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [windows-latest, macOS-13, ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
      run: |
        brew reinstall --build-from-source --formula wntr/epanet/libepanet/darwin-formula/libomp.rb
    - name: Install dependencies
      run: |
        python --version
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m pip install -e .

    - name: Run tests with coverage (parallel mode)
      run: |
        coverage run --parallel-mode -m pytest

    - name: Generate coverage XML
      run: |
        coverage xml -o coverage_${{ matrix.os }}_${{ matrix.python-version }}.xml

    - name: Upload coverage artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          .coverage.*       # Coverage data files
          coverage_*.xml    # The XML report

  combine_reports:
    runs-on: ubuntu-latest
    needs: pytest_coverage
    steps:
      - name: Download all artifacts
        uses: svenstaro/download-all-artifacts@v2
        with:
          path: coverage_artifacts

      - name: Install coverage & coveralls
        run: pip install coverage coveralls

      - name: Merge coverage
        run: |
          # Move all .coverage.* from coverage_artifacts subfolders into the workspace
          find coverage_artifacts -name ".coverage.*" -exec cp {} . \;
          coverage combine
          coverage xml -o coverage_merged.xml
          coverage report

      - name: Upload to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: coveralls
  
  source:
    name: Make SDist artifact 📦
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build SDist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [build, source]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/kbonney-wntr
    permissions:
      id-token: write
    steps:
    - name: Download wheel artifacts from build
      uses: actions/download-artifact@v4
      with:
        pattern: wntr_*
        path: dist
        merge-multiple: true
    - name: Download SDist artifact
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/