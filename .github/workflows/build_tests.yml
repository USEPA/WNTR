# This workflow will install Python dependencies, run tests and lint with all currently supported python versions on all major plattforms
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: GitHub CI

on:
  push:
    branches: [ main, dev, release ]
    tags:
      - '*'
  pull_request:
    branches: [ main, dev, release ]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-13]
      fail-fast: false
    steps:
    - name: Set env variables to handle macOS-13
      if: ${{ matrix.os == 'macOS-13'}}
      run: |
        echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
        echo "PLAT=macosx-13.0-universal2" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install libomp on macos
      if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
      run: |
        brew reinstall libomp # EPANETMSX repo also has this line, maybe include? `brew link --force --overwrite libomp`
    - name: Ad-hoc codesign for Apple Silicon
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        dylib_path="wntr/epanet/libepanet/darwin-arm"
        if [ -d "$dylib_path" ]; then
          for file in "$dylib_path"/*; do
            [ -e "$file" ] && codesign -f -s - "$file"
          done
        fi
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.0
      env:
        CIBW_ENVIRONMENT: BUILD_WNTR_EXTENSIONS='true'
        CIBW_BUILD: cp310-* cp311-* cp312-* cp313-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *-musllinux*"
        CIBW_REPAIR_WHEEL_COMMAND: '' # Skip repair step
    - name: Set up Python for twine verification
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install twine and verify wheels
      run: |
        python -m pip install --upgrade pip
        pip install twine
        for wheel in ./wheelhouse/*.whl; do
          echo "Verifying wheel: $wheel"
          twine check "$wheel"
        done
    - name: Fix macos13 wheel names # For some reason, they come out as macos14 instead of macos13
      if: ${{ matrix.os == 'macOS-13'}} 
      run: |
        echo "=== Before renaming ==="
        ls -la ./wheelhouse/
        for file in ./wheelhouse/*.whl; do
          echo "Original file: $file"
          new_name=$(echo "$file" | sed 's/macosx_14_0/macosx_13_0/')
          echo "New name: $new_name"
          mv "$file" "$new_name"
        done
        echo "=== After renaming ==="
        ls -la ./wheelhouse/
    - name: Fix linux wheel names # This is a bit dishonest, since the wheels are not properly repaired to be manylinux compatible. This is a (hopefully) temporary hack to get our wheels onto pypi. 
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        for file in ./wheelhouse/*.whl; do
          [ -e "$file" ] || continue
          new_file="${file/linux/manylinux2014}"
          mv "$file" "$new_file"
          echo "Renamed: $file -> $new_file"
        done
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  test_wheels:
    name: Test wheels
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.11']
        os: [macOS-13]
      fail-fast: false
    steps:
    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheel
      uses: actions/download-artifact@v4
      with:
        # name: wntr_${{ matrix.python-version }}_${{ matrix.os }}.whl
        pattern: "cibw-wheels-*"
        merge-multiple: true
    - name: Install wntr
      run: |
        python -m pip install --upgrade pip
        pip install wheel "numpy>=2.2.6" scipy networkx pandas matplotlib setuptools
        pip install --no-index --pre --find-links=. wntr
    - name: Import wntr
      run: |
        python -c "import wntr"
    - name: Checkout requirements.txt
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          requirements.txt
          wntr/tests/
          examples/
        sparse-checkout-cone-mode: false
        fetch-depth: 1
    - name: Set mpl backend on windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: echo "MPLBACKEND=Agg" >> $env:GITHUB_ENV
      shell: pwsh
    - if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
      run: |
        brew reinstall libomp
    - name: Test wntr
      run: |
        pip install -r requirements.txt
        pytest wntr/tests/ --ignore=wntr/tests/test_demos.py --ignore=wntr/tests/test_examples.py
  
  # run_coverage:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python-version: ['3.10', '3.11', '3.12', '3.13']
  #       os: [windows-latest, macOS-13, ubuntu-latest, macos-latest]
  #     fail-fast: false
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Set mpl backend on windows
  #     if: ${{ matrix.os == 'windows-latest' }}
  #     run: echo "MPLBACKEND=Agg" >> $env:GITHUB_ENV
  #     shell: pwsh
  #   - if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macOS-13'}}
  #     run: |
  #       brew reinstall libomp
  #   - name: Install dependencies
  #     run: |
  #       python --version
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #       python -m pip install -e .
  #   - name: Run Tests
  #     if: ${{ matrix.os != 'macos-latest' }}
  #     run: | 
  #       coverage erase
  #       coverage run --context=${{ matrix.os }}.py${{ matrix.python-version }} --source=wntr --omit="*/tests/*","*/sim/network_isolation/network_isolation.py","*/sim/aml/evaluator.py" -m pytest  --doctest-modules --doctest-glob="*.rst" wntr
  #       coverage run --context=${{ matrix.os }}.py${{ matrix.python-version }} --source=wntr --omit="*/tests/*","*/sim/network_isolation/network_isolation.py","*/sim/aml/evaluator.py" --append -m pytest --doctest-glob="*.rst" documentation
  #     env:
  #       COVERAGE_FILE: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
  #   - name: Run Tests (ARM-processor)
  #     if: ${{ matrix.os == 'macos-latest'}}
  #     # doctests are not flexible enough to skip EPANET=v2.0 errors on ARM processor, so do not run doctests on ARM system
  #     run: | 
  #       coverage erase
  #       coverage run --context=${{ matrix.os }}.py${{ matrix.python-version }} --source=wntr --omit="*/tests/*","*/sim/network_isolation/network_isolation.py","*/sim/aml/evaluator.py" -m pytest  --doctest-modules --doctest-glob="*.rst" wntr
  #     env:
  #       COVERAGE_FILE: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
  #   - name: Save coverage
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
  #       path: .coverage.${{ matrix.python-version }}.${{ matrix.os }}
  #       include-hidden-files: true

  # combine_reports:
  #   needs: [ run_coverage ]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Set up Python 
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: 3.11
  #   - uses: actions/checkout@v4
  #   - name: Install coverage
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #       python -m pip install -e .
  #       pip install coveralls
  #   - name: Download coverage artifacts from test matrix
  #     uses: actions/download-artifact@v4
  #     with:
  #       pattern: .coverage.*.ubuntu-latest # coverage from other OS cause problems
  #   - name: Setup coverage and combine reports
  #     run: coverage combine .coverage.*.ubuntu-latest
  #   - name: Create coverage report
  #     run: |
  #       echo "[paths]" > .coveragerc
  #       echo "source = " >> .coveragerc
  #       echo "    wntr/" >> .coveragerc
  #       echo "    wntr\\" >> .coveragerc
  #       echo "    D:\\a\\WNTR\\WNTR\\wntr" >> .coveragerc
  #       echo "    /home/runner/work/WNTR/WNTR/wntr" >> .coveragerc
  #       echo "    /Users/runner/work/WNTR/WNTR/wntr" >> .coveragerc
  #       echo "    ${{ github.workspace }}/wntr" >> .coveragerc
  #       coverage report
  #       coverage json --pretty-print
  #       coverage html --show-contexts
  #   - name: Save coverage JSON
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: coverage-json
  #       path: coverage.json
  #   - name: Save coverage html
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: coverage-html
  #       path: htmlcov
  #   - name: Push to coveralls
  #     run: coveralls --service=github --rcfile=.coveragerc
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_sdist:
    name: Build SDist artifact üì¶
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build SDist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs: [build_sdist, test_wheels]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/project/wntr
    permissions:
      id-token: write
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Download SDist artifact
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - name: Debug wheel files before upload
        run: |
          echo "=== Wheel files to upload ==="
          ls -la dist/
          echo "=== Wheel file details ==="
          for wheel in dist/*.whl; do
            echo "File: $wheel"
            file "$wheel"
            unzip -l "$wheel" | head -10
            echo "---"
          done
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs: [build_sdist, test_wheels]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Download SDist artifact
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_WNTR_API_TOKEN }}
